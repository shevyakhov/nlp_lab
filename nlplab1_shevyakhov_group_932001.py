# -*- coding: utf-8 -*-
"""nlplab1 shevyakhov group 932001.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b-zFeOSH1LhtT6XvAbXuZVyXKhxk60J7
"""

!pip install pymorphy2

import nltk
from nltk.tokenize import word_tokenize,sent_tokenize
import pymorphy2

nltk.download('punkt')

print(word_tokenize("Типа текст."))

print(sent_tokenize("Типа текст. Не, серьёзно."))

import pymorphy2
morph = pymorphy2.MorphAnalyzer()

w = morph.parse("университетов")[0]
print(w.normal_form)
#Ответ: университет
print(w.tag)
#Ответ: NOUN,inan,masc plur,gent

texts = ["Студенты колледжей и университетов, которые регулярно посещают занятия и хорошо спят, с большей вероятностью получат хорошие оценки в конце семестра. Присутствие на парах важно для налаживания взаимодействия между студентом и преподавателем и прохождения ключевых моментов учебного курса, а хороший сон необходим для оптимизации процессов запоминания и обучения. Однако в большинстве учебных заведений первые пары начинаются рано утром, из-за чего студенты нередко опаздывают или вовсе пропускают их, стремясь заполучить лишние часы для сна. Учитывая, что подростки и молодые люди часто ложатся спать поздно (причины не только социальные, но и биологические), первые пары вынуждают их недосыпать, а это не может не сказаться на общей успеваемости. Возможно, составителям расписаний занятий в вузах следует отказаться от утренних пар и перенести начало занятий на более позднее время, считают исследователи. Это позволит обучающимся получать достаточное количество часов сна и без дополнительных усилий повысить собственную успеваемость.",
         'С самого рождения большинство моих дней проходят в городе. Только редко мне удавалось выезжать на каникулах в другие страны или куда-то, как говорится, на природу. Поэтому большинство моих впечатлений о природе на самом деле связаны с этими редкими выездами и множеством различных документальных кино и телепередач о природе. Возможно, я знаю даже больше о разных растениях и животных, чем люди, которые на протяжении всего времени прожимают в деревнях и селах и даже в лесах. Однако, я вообще не представляю как ощущать природу, как выглядят многие природные феномены и подобное. Моя природа заключается в шуме автомобилей по утрам, тигры, зебры и леопарды – разные марки авто в каменных джунглях, даже циклы ночи и дня сменяются уличным освещением и фонарями, не так значима работа небесных светил. Моя природа ограничивается уличными кошками и песиками, которые могут встретится на прогулке или при посещении городского кафе или музея. Я путешествую по своей природе в подземельях метро и на буйволах и носорогах – автобусах и троллейбусах. Иногда удается воспользоваться гигантской гусеницей трамвая. Совершенно не известно для меня как отличить ядовитые ягоды от съедобных или звуки разных животных, тем не менее, я отлично ориентируюсь в вывесках салонов связи, банков и знаю, где выгоднее раздобыть пищу – в каких кафе акции и какие магазины дают скидки. Мне не известно, как ориентироваться в погодных приметах, но я отлично знаю, когда следует ожидать в городе пробок и могу определить по одежде примерный интеллектуальный уровень обладателя этого гардеробного набора. Для современного человека природа является чем-то другим, совсем не тем, чем была для людей всего столетием ранее. Мы становимся менее зависимы, но и более далеки от природы, обитаем в совершенно ином пространстве, которое подвластно своим собственным механизмам и особенностям. Наверное, особенно меняются люди подобные мне, которые большую часть своего времени обитают в мегаполисе, в пространстве бетонных джунглей. Настоящая природа с животными и растениями для меня выглядит как какая-то легенда из сказок. Такая природа известна мне только по видео и фото, как далекий мир, который останется неизвестным.',
         'Начиная с VII века до н. э., сменив множество различных носителей (свинцовые листы, костяные пластинки и так далее), европейцы (греки, римляне) стали записывать информацию (текст, рисунки) на деревянных дощечках, покрытых слоем воска, острой палочкой (стилосом). Записанное можно было стереть обратным тупым концом стилоса, для многоразового использования дощечки. Скреплялись такие дощечки по четыре штуки, таким образом совокупность четырех дощечек, называлась «тетрадь» от др.-греч. τέτρα — четыре.По одной из версий, слово тетрадь происходит от более поздних, так называемых «Апракос», распространенных в древней русской церкви, то есть книг Евангелия и Апостола недельные, расположенные по порядку рядовых зачал или по дням недельным, начиная со дня Пасхи. В Евангелии Апракос евангелист Иоанн предшествует прочим евангелистам. Но книги евангелистов и Деяний Апостольских с посланиями, расположенные в библейском порядке, носят название — Тетр. Это наименование собственно относится к четвероевангелию, но переписчиками распространено было и на книгу Апостол. От сюда и пошло название «тетрадь».На одном из «образцов» античных «школьных тетрадей», предположительно из Гермополя, датируемом 209–282 гг., твёрдой рукой учителя по-гречески было начертано: «Будь прилежен, мальчик, чтобы тебя не выдрали» (Государственные музеи Берлина, инвентарный номер 13234). И ученик прилежно переписал эту мудрую мысль четыре раза. В 1920-е годы были выпущены тетради с супрематическими обложками Е. Фортунатовой и Л. Шлегер. В настоящее время они представляют библиографическую редкость.'
         ]

def get_all_types(text):
  word_types = {}
  temp_tokens = word_tokenize(text)
  for token in temp_tokens:
    parsed_token = morph.parse(token)[0]
    word_types[parsed_token.tag.PARTS_OF_SPEECH] = 1
  print(set(word_types))

def tokenize(text):
  tokens = word_tokenize(text)
  lemmas = []
  for token in tokens:
      parsed_token = morph.parse(token)[0]
      if 'NOUN' in parsed_token.tag or 'ADJF'in parsed_token.tag or 'ADJS' in parsed_token.tag:
          lemmas.append(parsed_token.normal_form)
  print(tokens)
  matching_pairs = []
  for i in range(len(lemmas) - 1):
    word1 = lemmas[i]
    word2 = lemmas[i + 1]
    parsed_word1 = morph.parse(word1)[0]
    parsed_word2 = morph.parse(word2)[0]
    if (
        (('NOUN' in parsed_word1.tag or 'ADJF' in parsed_word1.tag or 'ADJS' in parsed_word1.tag) and
        ('NOUN' in parsed_word2.tag or 'ADJF' in parsed_word1.tag or 'ADJS' in parsed_word1.tag) and
        parsed_word1.tag.gender == parsed_word2.tag.gender and
        parsed_word1.tag.number == parsed_word2.tag.number and
        parsed_word1.tag.case == parsed_word2.tag.case)

    ):
        matching_pairs.append((word1, word2))
  return matching_pairs

for t in texts:
  get_all_types(t)
  pairs = tokenize(t)
  for pair in pairs:
      print(" ".join(pair))
  print()